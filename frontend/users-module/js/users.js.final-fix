/**
 * Users Module
 * Handles user management, roles, and permissions
 */
window.usersModule = {
    users: [],
    workers: [],
    clients: [],
    filteredUsers: [],
    filteredWorkers: [],
    filteredClients: [],

    init: async function() {
        console.log('Users module initialized');
        await this.loadData();
        this.setupEventListeners();
        this.renderTables();
        this.updateStats();
        this.updateUserInfo();
    },

    loadData: async function() {
        let allUsers = window.MobiliAriState.getState('users');
        if (!allUsers || allUsers.length === 0) {
            try {
                const response = await fetch('../data/users.json');
                if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
                allUsers = await response.json();
                window.MobiliAriState.updateState('users', allUsers);
            } catch (error) {
                console.error('Error loading users.json:', error);
                allUsers = [];
            }
        }

        this.users = allUsers.filter(u => u.profileType === 'system_user');
        this.workers = allUsers.filter(u => u.profileType === 'worker');
        this.clients = allUsers.filter(u => u.profileType === 'client');

        this.filteredUsers = [...this.users];
        this.filteredWorkers = [...this.workers];
        this.filteredClients = [...this.clients];
    },

    setupEventListeners: function() {
        // Event listeners for filters, buttons, etc. can be added here.
    },

    renderTables: function() {
        this.renderSystemUsers();
        this.renderWorkers();
        this.renderClients();
    },

    renderSystemUsers: function() {
        const tableBody = document.getElementById('usersTableBody');
        if (!tableBody) return;
        tableBody.innerHTML = this.filteredUsers.map(user => `
            <tr>
                <td>${user.name}</td>
                <td>${user.email}</td>
                <td>${user.role}</td>
                <td><span class="status-badge status-${user.status.toLowerCase()}">${user.status}</span></td>
                <td>${this.formatDate(user.lastLogin)}</td>
                <td><button class="btn btn-sm btn-outline-primary">Ver</button></td>
            </tr>
        `).join('') || '<tr><td colspan="6" class="text-center">No hay usuarios del sistema.</td></tr>';
    },

    renderWorkers: function() {
        const tableBody = document.getElementById('workersTableBody');
        if (!tableBody) return;
        tableBody.innerHTML = this.filteredWorkers.map(worker => `
            <tr>
                <td>${worker.name}</td>
                <td>${worker.identification_type}</td>
                <td>${worker.identification}</td>
                <td>${worker.position}</td>
                <td>${worker.email}</td>
                <td>${worker.phone}</td>
                <td><span class="status-badge status-${worker.status.toLowerCase()}">${worker.status}</span></td>
                <td><button class="btn btn-sm btn-outline-primary">Ver</button></td>
            </tr>
        `).join('') || `<tr><td colspan="8" class="text-center">No se encontraron trabajadores.</td></tr>`;
    },

    renderClients: function() {
        const tableBody = document.getElementById('clientsTableBody');
        if (!tableBody) return;
        tableBody.innerHTML = this.filteredClients.map(client => `
            <tr>
                <td>${client.name}</td>
                <td>${client.identification_type}</td>
                <td>${client.identification}</td>
                <td>${client.client_type}</td>
                <td>${client.email}</td>
                <td>${client.phone}</td>
                <td><span class="status-badge status-${client.status.toLowerCase()}">${client.status}</span></td>
                <td><button class="btn btn-sm btn-outline-primary">Ver</button></td>
            </tr>
        `).join('') || `<tr><td colspan="8" class="text-center">No se encontraron clientes.</td></tr>`;
    },

    updateStats: function() {
        const allUsers = [...this.users, ...this.workers, ...this.clients];
        document.getElementById('totalUsers').textContent = allUsers.length;
        document.getElementById('activeUsers').textContent = allUsers.filter(u => u.status === 'Activo').length;
        document.getElementById('adminUsers').textContent = this.users.filter(u => u.role === 'Administrador').length;
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('recentLogins').textContent = allUsers.filter(u => u.lastLogin && u.lastLogin.startsWith(today)).length;
    },

    formatDate: function(dateString) {
        if (!dateString) return 'N/A';
        return new Date(dateString).toLocaleDateString('es-ES', { year: 'numeric', month: 'short', day: 'numeric' });
    },

    updateUserInfo: function() {
        const currentUser = window.MobiliAriState.currentUser;
        if (currentUser) {
            const userName = document.getElementById('userName');
            const userRole = document.getElementById('userRole');
            if (userName) userName.textContent = currentUser.name;
            if (userRole) userRole.textContent = currentUser.role;
        }
    }
};

document.addEventListener('DOMContentLoaded', () => {
    if (window.usersModule) {
        window.usersModule.init();
    }
});
