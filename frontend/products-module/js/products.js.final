window.productsModule = {
    prefabricatedProducts: [],
    customProducts: [],
    filteredPrefabricatedProducts: [],
    filteredCustomProducts: [],

    init: async function() {
        console.log('Products module initialized');
        try {
            await this.loadProducts();
            this.setupEventListeners();
            this.renderProducts();
            this.updateStats();
            this.updateUserInfo();
        } catch (error) {
            console.error('Error initializing products module:', error);
        }
    },

    loadProducts: async function() {
        let prefabricated = window.MobiliAriState.getState('prefabricatedProducts');
        let custom = window.MobiliAriState.getState('customProducts');

        if (!prefabricated || prefabricated.length === 0) {
            try {
                const response = await fetch('../data/prefabricated-products.json');
                prefabricated = await response.json();
                window.MobiliAriState.updateState('prefabricatedProducts', prefabricated);
            } catch (error) {
                console.error('Error loading prefabricated products:', error);
                prefabricated = [];
            }
        }

        if (!custom || custom.length === 0) {
            try {
                const response = await fetch('../data/custom-products.json');
                custom = await response.json();
                window.MobiliAriState.updateState('customProducts', custom);
            } catch (error) {
                console.error('Error loading custom products:', error);
                custom = [];
            }
        }

        this.prefabricatedProducts = prefabricated;
        this.customProducts = custom;
        this.filteredPrefabricatedProducts = [...this.prefabricatedProducts];
        this.filteredCustomProducts = [...this.customProducts];
    },

    setupEventListeners: function() {
        const navLinks = document.querySelectorAll('[data-module]');
        navLinks.forEach(link => {
            link.addEventListener('click', (e) => {
                e.preventDefault();
                const module = e.target.getAttribute('data-module') || e.target.closest('[data-module]').getAttribute('data-module');
                if (module && module !== 'products') {
                    this.navigateToModule(module);
                }
            });
        });

        const sidebarToggle = document.getElementById('sidebarToggle');
        if (sidebarToggle) {
            sidebarToggle.addEventListener('click', () => this.toggleSidebar());
        }

        const logoutBtn = document.getElementById('logoutBtnMgmt');
        if (logoutBtn) {
            logoutBtn.addEventListener('click', () => window.dispatchEvent(new CustomEvent('user-logout')));
        }

        const newProductBtn = document.getElementById('newProductBtn');
        if (newProductBtn) {
            newProductBtn.addEventListener('click', () => this.showNewProductModal());
        }

        const createProductBtn = document.getElementById('createProductBtn');
        if (createProductBtn) {
            createProductBtn.addEventListener('click', () => this.createNewProduct());
        }

        const exportBtn = document.getElementById('exportBtn');
        if (exportBtn) {
            exportBtn.addEventListener('click', () => this.exportProducts());
        }

        const closeNewProductModalBtn = document.getElementById('closeNewProductModalBtn');
        if (closeNewProductModalBtn) {
            closeNewProductModalBtn.addEventListener('click', () => this.closeNewProductModal());
        }

        const cancelNewProductBtn = document.getElementById('cancelNewProductBtn');
        if (cancelNewProductBtn) {
            cancelNewProductBtn.addEventListener('click', () => this.closeNewProductModal());
        }

        const newProductModal = document.getElementById('newProductModal');
        if (newProductModal) {
            newProductModal.addEventListener('click', (e) => {
                if (e.target === newProductModal) {
                    this.closeNewProductModal();
                }
            });
        }

        const productTypeSelector = document.getElementById('productTypeSelector');
        if (productTypeSelector) {
            productTypeSelector.addEventListener('change', (e) => {
                const prefabricatedFields = document.getElementById('prefabricated-fields');
                const customFields = document.getElementById('custom-fields');
                if (e.target.value === 'prefabricated') {
                    prefabricatedFields.style.display = 'block';
                    customFields.style.display = 'none';
                } else {
                    prefabricatedFields.style.display = 'none';
                    customFields.style.display = 'block';
                }
            });
        }

        const prefabricatedTable = document.getElementById('prefabricatedProductsTableBody');
        if (prefabricatedTable) {
            prefabricatedTable.addEventListener('click', (e) => {
                if (e.target.classList.contains('view-product-btn')) {
                    const id = parseInt(e.target.getAttribute('data-id'));
                    this.viewProduct(id, 'prefabricated');
                }
            });
        }

        const customTable = document.getElementById('customProductsTableBody');
        if (customTable) {
            customTable.addEventListener('click', (e) => {
                if (e.target.classList.contains('view-product-btn')) {
                    const id = parseInt(e.target.getAttribute('data-id'));
                    this.viewProduct(id, 'custom');
                }
            });
        }
    },

    showNewProductModal: function() {
        const modal = document.getElementById('newProductModal');
        const form = document.getElementById('newProductForm');
        form.reset();
        form.classList.remove('was-validated');
        const imagePreview = document.getElementById('imagePreview');
        if (imagePreview) {
            imagePreview.style.display = 'none';
        }
        const bsModal = new bootstrap.Modal(modal);
        bsModal.show();
    },

    closeNewProductModal: function() {
        const modal = document.getElementById('newProductModal');
        const bsModal = bootstrap.Modal.getInstance(modal);
        if (bsModal) {
            bsModal.hide();
        }
    },

    createNewProduct: function() {
        const form = document.getElementById('newProductForm');
        const formData = new FormData(form);
        const productType = document.getElementById('productTypeSelector').value;

        if (productType === 'prefabricated') {
            const newProduct = {
                id: Math.max(0, ...this.prefabricatedProducts.map(p => p.id)) + 1,
                name: formData.get('prefabricated_name'),
                specification: formData.get('prefabricated_spec'),
                category: formData.get('prefabricated_category'),
                registrationDate: new Date().toISOString().split('T')[0],
                basePrice: parseFloat(formData.get('prefabricated_base_price')),
                imagePath: formData.get('prefabricated_img_path'),
                salePrice: parseFloat(formData.get('prefabricated_sale_price')),
                stock: parseInt(formData.get('prefabricated_stock')),
                minStock: parseInt(formData.get('prefabricated_min_stock')),
                lastProductionDate: formData.get('prefabricated_last_prod'),
                status: formData.get('prefabricated_status'),
                description: formData.get('prefabricated_desc'),
            };
            this.prefabricatedProducts.push(newProduct);
            window.MobiliAriState.updateState('prefabricatedProducts', this.prefabricatedProducts);
        } else {
            const newProduct = {
                id: Math.max(100, ...this.customProducts.map(p => p.id)) + 1,
                name: formData.get('custom_name'),
                specifications: formData.get('custom_spec'),
                estimatedTime: parseInt(formData.get('custom_time')),
                status: formData.get('custom_status'),
                description: formData.get('custom_desc'),
                basePrice: parseFloat(formData.get('custom_base_price')),
                imagePath: formData.get('custom_img_path'),
            };
            this.customProducts.push(newProduct);
            window.MobiliAriState.updateState('customProducts', this.customProducts);
        }
        
        this.renderProducts();
        this.updateStats();
        this.closeNewProductModal();
        this.showAlert('success', 'Producto creado exitosamente');
    },

    renderProducts: function() {
        this.renderPrefabricatedProducts();
        this.renderCustomProducts();
    },

    renderPrefabricatedProducts: function() {
        const tableBody = document.getElementById('prefabricatedProductsTableBody');
        if (!tableBody) return;
        tableBody.innerHTML = this.filteredPrefabricatedProducts.map(p => `
            <tr>
                <td>${p.name}</td>
                <td>${p.specification}</td>
                <td>${p.category}</td>
                <td>${this.formatDate(p.registrationDate)}</td>
                <td>$${p.basePrice.toLocaleString()}</td>
                <td>${p.imagePath}</td>
                <td>$${p.salePrice.toLocaleString()}</td>
                <td>${p.stock}</td>
                <td>${p.minStock}</td>
                <td>${this.formatDate(p.lastProductionDate)}</td>
                <td>${p.status}</td>
                <td>${p.description}</td>
                <td><button class="btn btn-sm btn-outline-primary view-product-btn" data-id="${p.id}">Ver</button></td>
            </tr>
        `).join('') || `<tr><td colspan="13" class="text-center">No hay productos prefabricados.</td></tr>`;
    },

    renderCustomProducts: function() {
        const tableBody = document.getElementById('customProductsTableBody');
        if (!tableBody) return;
        tableBody.innerHTML = this.filteredCustomProducts.map(p => `
            <tr>
                <td>${p.name}</td>
                <td>${p.specifications}</td>
                <td>${p.estimatedTime}</td>
                <td>${p.status}</td>
                <td>${p.description}</td>
                <td>$${p.basePrice.toLocaleString()}</td>
                <td>${p.imagePath}</td>
                <td><button class="btn btn-sm btn-outline-primary view-product-btn" data-id="${p.id}">Ver</button></td>
            </tr>
        `).join('') || `<tr><td colspan="8" class="text-center">No hay productos personalizados.</td></tr>`;
    },

    viewProduct: function(productId, type) {
        const product = type === 'prefabricated' 
            ? this.prefabricatedProducts.find(p => p.id === productId)
            : this.customProducts.find(p => p.id === productId);

        if (!product) return;

        const modalTitle = document.getElementById('productDetailTitle');
        const modalBody = document.getElementById('productDetailBody');
        
        modalTitle.textContent = `Detalle de: ${product.name}`;

        let content = '';
        if (type === 'prefabricated') {
            content = `
                <p><strong>ID:</strong> ${product.id}</p>
                <p><strong>Especificación:</strong> ${product.specification}</p>
                <p><strong>Categoría:</strong> ${product.category}</p>
                <p><strong>Fecha de Registro:</strong> ${this.formatDate(product.registrationDate)}</p>
                <p><strong>Precio Base:</strong> $${product.basePrice.toLocaleString()}</p>
                <p><strong>Precio Venta:</strong> $${product.salePrice.toLocaleString()}</p>
                <p><strong>Stock:</strong> ${product.stock}</p>
                <p><strong>Stock Mínimo:</strong> ${product.minStock}</p>
                <p><strong>Última Producción:</strong> ${this.formatDate(product.lastProductionDate)}</p>
                <p><strong>Estado:</strong> ${product.status}</p>
                <p><strong>Descripción:</strong> ${product.description}</p>
            `;
        } else {
            content = `
                <p><strong>ID:</strong> ${product.id}</p>
                <p><strong>Especificaciones:</strong> ${product.specifications}</p>
                <p><strong>Tiempo Estimado:</strong> ${product.estimatedTime} horas</p>
                <p><strong>Estado:</strong> ${product.status}</p>
                <p><strong>Descripción:</strong> ${product.description}</p>
                <p><strong>Precio Base:</strong> $${product.basePrice.toLocaleString()}</p>
            `;
        }

        modalBody.innerHTML = content;

        const modal = new bootstrap.Modal(document.getElementById('productDetailModal'));
        modal.show();
    },

    updateStats: function() {
        const totalProducts = this.prefabricatedProducts.length + this.customProducts.length;
        const inStockProducts = this.prefabricatedProducts.filter(p => p.stock > p.minStock).length;
        const lowStockProducts = this.prefabricatedProducts.filter(p => p.stock > 0 && p.stock <= p.minStock).length;
        const outOfStockProducts = this.prefabricatedProducts.filter(p => p.stock === 0).length;

        document.getElementById('totalProducts').textContent = totalProducts;
        document.getElementById('inStockProducts').textContent = inStockProducts;
        document.getElementById('lowStockProducts').textContent = lowStockProducts;
        document.getElementById('outOfStockProducts').textContent = outOfStockProducts;
    },

    formatDate: function(dateString) {
        if (!dateString) return 'No registrada';
        const date = new Date(dateString);
        return date.toLocaleDateString('es-ES', {
            year: 'numeric',
            month: 'short',
            day: 'numeric'
        });
    },

    navigateToModule: function(module) {
        if (document.body.classList.contains('role-administrador')) {
            sessionStorage.setItem('isAdmin', 'true');
        }
        window.dispatchEvent(new CustomEvent('navigate-to-module', {
            detail: { module: module }
        }));
    },

    toggleSidebar: function() {
        const sidebar = document.getElementById('sidebar');
        if (sidebar) {
            sidebar.classList.toggle('collapsed');
        }
    },

    updateUserInfo: function() {
        const currentUser = window.MobiliAriState.currentUser;
        
        if (currentUser) {
            const userName = document.getElementById('userName');
            const userRole = document.getElementById('userRole');
            
            if (userName) userName.textContent = currentUser.name;
            if (userRole) userRole.textContent = currentUser.role;

            const adminElements = document.querySelectorAll('.admin-only');
            adminElements.forEach(el => {
                const shouldShow = !currentUser.role || currentUser.role === 'administrador' || currentUser.role === 'admin';
                el.style.display = shouldShow ? 'block' : 'none';
            });
        } else {
            const adminElements = document.querySelectorAll('.admin-only');
            adminElements.forEach(el => {
                el.style.display = 'block';
            });
        }
    },

    showAlert: function(type, message) {
        const alert = document.createElement('div');
        alert.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
        alert.style.cssText = 'top: 20px; right: 20px; z-index: 9999;';
        alert.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
        `;
        document.body.appendChild(alert);
        setTimeout(() => {
            const bsAlert = new bootstrap.Alert(alert);
            bsAlert.close();
        }, 5000);
    }
};

document.addEventListener('DOMContentLoaded', () => {
    window.productsModule.init();
});
